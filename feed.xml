<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="EOC-dev.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="EOC-dev.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-22T05:39:35+00:00</updated><id>EOC-dev.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Fuzzy-Logic speed controller using an ultrasonic sensor</title><link href="EOC-dev.github.io/blog/2024/fuzzyspeed/" rel="alternate" type="text/html" title="Fuzzy-Logic speed controller using an ultrasonic sensor"/><published>2024-01-21T16:40:16+00:00</published><updated>2024-01-21T16:40:16+00:00</updated><id>EOC-dev.github.io/blog/2024/fuzzyspeed</id><content type="html" xml:base="EOC-dev.github.io/blog/2024/fuzzyspeed/"><![CDATA[<p>For my Fuzzy Logic undergrad class we were required to do a project. This was a fairly open ended design project which included both a MATLAB simulation section as well as a hardware implentation section, and was a collaborative effort between me and my classmate <strong>Cooper Burns</strong> (insert LinkedIn link here). I mainly dealt with the hardware section, which I will describe in this article.</p> <h2 id="the-plan">The Plan</h2> <p>The plan for this project was to design a fuzzy logic controller such that, while approaching an object (a wall, box, or any object detectable by an ultrasonic sensor), a robot’s speed would decrease based on the distance from that object, getting slower and slower as it gets closer until it stops a set distance away.</p> <h2 id="hardware-setup">Hardware Setup</h2> <p>The hardware for this project was based on <a href="https://osoyoo.com/2020/03/01/use-raspberry-pi-to-control-mecanum-omni-wheel-robot-car/">this</a> osoyoo robot kit, but generally to do this project one would need:</p> <table> <thead> <tr> <th>Hardware</th> <th style="text-align: center">We Used</th> </tr> </thead> <tbody> <tr> <td>Single Board Computer</td> <td style="text-align: center">RaspberryPi 4</td> </tr> <tr> <td>Motor Controller</td> <td style="text-align: center">Osoyoo L298n based module</td> </tr> <tr> <td>Geared DC Motor</td> <td style="text-align: center">osoyoo Motors</td> </tr> <tr> <td>Ultrasonic Sensor</td> <td style="text-align: center">HC-SR04</td> </tr> <tr> <td>Robot Chassis</td> <td style="text-align: center">Osoyoo chassis</td> </tr> </tbody> </table> <p>The robot was setup according to the instructions <a href="https://osoyoo.com/2020/03/01/use-raspberry-pi-to-control-mecanum-omni-wheel-robot-car/">here</a>, but fundamentally the hardware translates to the following control diagram:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Fuzzy-Logic%20speed%20controller/ControlFlowDiagram-480.webp 480w,/assets/img/Fuzzy-Logic%20speed%20controller/ControlFlowDiagram-800.webp 800w,/assets/img/Fuzzy-Logic%20speed%20controller/ControlFlowDiagram-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Fuzzy-Logic%20speed%20controller/ControlFlowDiagram.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="software-setup-and-code-walk-through">Software Setup and code walk through</h2> <p>After the hardware was setup, the software was created to implement the control scheme using python – a setup guide for which is provided on the <a href="https://github.com/EOC-dev/FuzzyLogicSpeedControllerV1">github</a> page for this project.</p> <p>Below is the state flow diagram for the main python program:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Fuzzy-Logic%20speed%20controller/FuzzyMechanumStateFlow-480.webp 480w,/assets/img/Fuzzy-Logic%20speed%20controller/FuzzyMechanumStateFlow-800.webp 800w,/assets/img/Fuzzy-Logic%20speed%20controller/FuzzyMechanumStateFlow-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Fuzzy-Logic%20speed%20controller/FuzzyMechanumStateFlow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>First, the GPIO pins are setup using the <a href="">RPI.GPIO</a> library</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># GPIO pin assignments for motor control
</span>
<span class="c1">#Osoyoo used an l298n based motor driver which requires 3 pins per motor: a PWM(analog) signal pin to control the speed of the motor (the EN pins), and two digital logic pins to control the direction of the motor using an H-bridge circuit.
</span><span class="n">IN1Rear</span><span class="p">,</span> <span class="n">IN2Rear</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">18</span>
<span class="n">IN3Rear</span><span class="p">,</span> <span class="n">IN4Rear</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">15</span> 
<span class="n">ENA</span><span class="p">,</span> <span class="n">ENB</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">33</span>

<span class="c1">#front Wheels were not used do to a hardware problem with the osoyoo motor x driver
</span><span class="n">IN1Front</span><span class="p">,</span> <span class="n">IN2Front</span> <span class="o">=</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">38</span>
<span class="n">IN3Front</span><span class="p">,</span> <span class="n">IN4Front</span> <span class="o">=</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">32</span>

<span class="c1">#Setting up pins for the ultrasonic sensor
</span><span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="n">ECHO_PIN</span> <span class="o">=</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">37</span>

<span class="c1"># Initialization - setting up GPIO pins as input/output. For more info, please read the GPIO docs: https://sourceforge.net/p/raspberry-gpio-python/wiki/BasicUsage/
</span><span class="n">GPIO</span><span class="p">.</span><span class="nf">setmode</span><span class="p">(</span><span class="n">GPIO</span><span class="p">.</span><span class="n">BOARD</span><span class="p">)</span>
<span class="n">GPIO</span><span class="p">.</span><span class="nf">setup</span><span class="p">([</span><span class="n">IN1Rear</span><span class="p">,</span> <span class="n">IN2Rear</span><span class="p">,</span> <span class="n">IN3Rear</span><span class="p">,</span> <span class="n">IN4Rear</span><span class="p">,</span> <span class="n">ENA</span><span class="p">,</span> <span class="n">ENB</span><span class="p">,</span> <span class="n">IN1Front</span><span class="p">,</span> <span class="n">IN2Front</span><span class="p">,</span> <span class="n">IN3Front</span><span class="p">,</span> <span class="n">IN4Front</span><span class="p">,</span> <span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="n">ECHO_PIN</span><span class="p">],</span> <span class="n">GPIO</span><span class="p">.</span><span class="n">OUT</span><span class="p">)</span>
<span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">([</span><span class="n">ENA</span><span class="p">,</span> <span class="n">ENB</span><span class="p">],</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">GPIO</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="n">ECHO_PIN</span><span class="p">,</span> <span class="n">GPIO</span><span class="p">.</span><span class="n">IN</span><span class="p">)</span>

<span class="c1"># Motor control functions (e.g., go_ahead, turn_left, etc.)
# Each function corresponds to a motor action, these defs were mainly taken from the provided osoyoo tutorial series for the robot kit used in this project: https://osoyoo.com/driver/mecanum/mecanum-pi.py
</span>
<span class="c1">#make rear right motor moving forward
</span><span class="k">def</span> <span class="nf">rr_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">):</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN1Rear</span><span class="p">,</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN2Rear</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>

    <span class="c1">#ChangeDutyCycle(speed) function can change the motor rotation speed
</span>    <span class="c1">#rightSpeed.ChangeDutyCycle(speed)
</span>
<span class="c1">#make rear left motor moving forward    
</span><span class="k">def</span> <span class="nf">rl_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">):</span>  
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN3Rear</span><span class="p">,</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN4Rear</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>
    <span class="c1">#leftSpeed.ChangeDutyCycle(speed)
</span>
<span class="k">def</span> <span class="nf">go_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">):</span>
    <span class="nf">rl_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
    <span class="nf">rr_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
<span class="c1">#     fl_ahead(speed)
#     fr_ahead(speed)
</span>    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN1Front</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span> <span class="c1">#Since we are just using motors that use motor pi controller, the rear wheels are disabled
</span>    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN2Front</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span> <span class="c1">#Sadly, only motors controlled using motor pi can have the pwm signal modified
</span>    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN3Front</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN4Front</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># Setup for PWM speed control
#following code only works when using Model-Pi instead of Model X motor driver board which can give raspberry Pi USB 5V power
#Initialize Rear model Pi board ENA and ENB pins, tell OS that ENA,ENB will output analog PWM signal with 1000 frequency
</span><span class="n">rightSpeed</span> <span class="o">=</span> <span class="n">GPIO</span><span class="p">.</span><span class="nc">PWM</span><span class="p">(</span><span class="n">ENA</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">leftSpeed</span> <span class="o">=</span> <span class="n">GPIO</span><span class="p">.</span><span class="nc">PWM</span><span class="p">(</span><span class="n">ENB</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">rightSpeed</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">leftSpeed</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <p>Next, the code defines the function for the Ultrasonic Sensor function:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Ultrasonic distance measurement function. I go into more detail on the concepts behind this code on the corresponding blog entry for this project:
</span><span class="k">def</span> <span class="nf">DistMeasure</span><span class="p">():</span>
    <span class="c1"># set Trigger pin to high to send out pulse
</span>    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
 
    <span class="c1"># set Trigger pin to low after 0.01ms
</span>    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.00001</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
 
    <span class="n">TimeSent</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">TimeRecieved</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
 
    <span class="c1"># save time the pulse was sent
</span>    <span class="k">while</span> <span class="n">GPIO</span><span class="p">.</span><span class="nf">input</span><span class="p">(</span><span class="n">ECHO_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">TimeSent</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
 
    <span class="c1"># save time the reflected pulse was recieved
</span>    <span class="k">while</span> <span class="n">GPIO</span><span class="p">.</span><span class="nf">input</span><span class="p">(</span><span class="n">ECHO_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">TimeRecieved</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
 
    <span class="c1"># difference between timestamp sending the pulse and timestamp recieving the reflected wave back
</span>    <span class="n">ElapsedTIme</span> <span class="o">=</span> <span class="n">TimeRecieved</span> <span class="o">-</span> <span class="n">TimeSent</span>

    <span class="c1"># Solving for distance using the classic speed = dist/time equation. Speed is speed of sound (343 m/s so 34300 cm/s), and we divide by two here to account for our time calculation being the time for the pulse to hit an object and then return -- whereas we just want the time to travel to the object.
</span>    <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">ElapsedTIme</span> <span class="o">*</span> <span class="mi">34300</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
 
    <span class="k">return</span> <span class="n">distance</span>
</code></pre></div></div> <p>Essentially whats happening here is an extrapolation of the classic physics formula:</p> \[\text{speed} = \frac{\text{distance}}{\text{time}}\] <p>Whereas in our case we use the ultrasonic sensor to send out a sound pulse when the TRIGGER pin is set high, then record the time when it recieves it and the ECHO pin is high. The speed of sound is a constant, and thus our equation becomes:</p> \[\text{distance} = \frac{\text{(TimeSignalRecieved - TimeSignalSent)} \times 34300}{2}\] <p>The code then defines the function for the Ultrasonic Sensor function:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
</code></pre></div></div> <p>Sadly, I felt like a detailed explanation of the principles behind how fuzzy inferencing works was beyond the scope of this short portfolio article. Essentially</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <p>If the reader is unfamiliar with how fuzzy logic inferencing works, <a href="https://www.youtube.com/watch?v=__0nZuG4sTw">here</a> is a great series of videos by the great Brian Douglas on the topic.</p> <p>The last part of the code defines the main control loop, which calls the MeasureDist function and pipes the distance recieved into our fuzzy logic controller function to obtain the corresponding PWM which will be used to drive our system. This code runs in a loop until a user interrupts the program with a keyboard interrupt.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Continuous loop for processing and control
</span><span class="k">try</span><span class="p">:</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">UltraDist</span> <span class="o">=</span> <span class="nc">DistMeasure</span><span class="p">()</span>  <span class="c1"># Measure distance
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Object distance = </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">UltraDist</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> cm</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">FuzzSpeedOut</span> <span class="o">=</span> <span class="nf">get_speed_value</span><span class="p">(</span><span class="n">UltraDist</span><span class="p">)</span>  <span class="c1"># Process distance through fuzzy logic
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s"> Fuzzy Speed is: </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">FuzzSpeedOut</span><span class="p">))</span>
        <span class="nf">go_ahead</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>  <span class="c1"># initialize a speed for the motor
</span>        <span class="n">rightSpeed</span><span class="p">.</span><span class="nc">ChangeDutyCycle</span><span class="p">(</span><span class="n">FuzzSpeedOut</span><span class="p">)</span> <span class="c1">#USe the speed obtained 
</span>        <span class="n">leftSpeed</span><span class="p">.</span><span class="nc">ChangeDutyCycle</span><span class="p">(</span><span class="n">FuzzSpeedOut</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>

<span class="c1"># Shutdown - cleanup on interrupt (CTRL+C)
</span><span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">User ended program</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">cleanup</span><span class="p">()</span>
</code></pre></div></div> <p>Finally, here is a video of the code working in action:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/Fuzzy-Logic%20speed%20controller/FuzzyLogic_FinalProject_Test2-(720p30).mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> </div> <div class="caption"> Pretty cool, huh? </div> <p>Something to note is that one need not have any of the hardware to test out the code. Included in the <a href="">github</a> are two files, one for using the code with hardware and one for using</p> <h2 id="what-could-be-improved">What could be improved?</h2> <ol> <li>An astute observer will note a disturbing lack of hardware interrupts in the source code. This was mainly because I was still going through my Embedded Systems class and was not comfortable using hardware interrupts extensively yet. Micropython supports interrupts <a href="https://docs.micropython.org/en/latest/reference/isr_rules.html">natively</a>, and Circuitpython supports them <a href="https://learn.adafruit.com/cooperative-multitasking-in-circuitpython-with-asyncio">indirectly</a> using the asyncio module. Both Micropython and Circuitpython are supported on the raspberry pi (see <a href="https://www.raspberrypi.com/documentation/microcontrollers/micropython.html">here</a> and <a href="https://learn.adafruit.com/circuitpython-on-raspberrypi-linux/overview">here</a>). If I were to return to this project I would absolutely use interrupts.</li> <li>One may also notice from the video the crude breadboard voltage divider, this was made out of necessity as there was a mismatch between the output signal from the Ultrasonic sensor and the maximum input voltage of the Rpi’s GPIO pins. While our solution worked, A more elegant solution would be to use a logic level shifter.</li> <li>Since doing this project I have since learned about the <a href="https://github.com/alvesoaj/eFLL">Embedded Fuzzy Logic Library</a>, which allows emplementing fuzzy logic controllers on microcontrollers. I think it would be neat to design a fuzzy controller using the skfuzzy library, then implement it on hardware using the eFLL.</li> </ol>]]></content><author><name></name></author><category term="portfolio"/><category term="Fuzzy-Logic,"/><category term="RaspberryPi,"/><category term="Python"/><summary type="html"><![CDATA[It's Fuzzy]]></summary></entry><entry><title type="html">a post with TikZJax</title><link href="EOC-dev.github.io/blog/2023/tikzjax/" rel="alternate" type="text/html" title="a post with TikZJax"/><published>2023-12-12T22:25:00+00:00</published><updated>2023-12-12T22:25:00+00:00</updated><id>EOC-dev.github.io/blog/2023/tikzjax</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/tikzjax/"><![CDATA[<p>This is an example post with TikZ code. TikZJax converts script tags (containing TikZ code) into SVGs.</p> <script type="text/tikz">
\begin{tikzpicture}
    \draw[red,fill=black!60!red] (0,0) circle [radius=1.5];
    \draw[green,fill=black!60!green] (0,0) circle [x radius=1.5cm, y radius=10mm];
    \draw[blue,fill=black!60!blue] (0,0) circle [x radius=1cm, y radius=5mm, rotate=30];
\end{tikzpicture}
</script>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included TikZ code could look like]]></summary></entry><entry><title type="html">a post with bibliography</title><link href="EOC-dev.github.io/blog/2023/post-bibliography/" rel="alternate" type="text/html" title="a post with bibliography"/><published>2023-07-12T13:56:00+00:00</published><updated>2023-07-12T13:56:00+00:00</updated><id>EOC-dev.github.io/blog/2023/post-bibliography</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/post-bibliography/"><![CDATA[<p>This post shows how to add bibliography to simple blog posts. We support every citation style that <a href="https://github.com/inukshuk/jekyll-scholar">jekyll-scholar</a> does. That means simple citation like <a class="citation" href="#einstein1950meaning">(Einstein &amp; Taub, 1950)</a>, multiple citations like <a class="citation" href="#einstein1950meaning">(Einstein &amp; Taub, 1950; Einstein, 1905)</a>, long references like <span id="einstein1905movement">Einstein, A. (1905). Un the movement of small particles suspended in statiunary liquids required by the molecular-kinetic theory 0f heat. <i>Ann. Phys.</i>, <i>17</i>, 549–560.</span> or also quotes:</p> <blockquote><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,<br/>sed do eiusmod tempor.</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing.</p><cite><a class="citation" href="#einstein1905electrodynamics">(Einstein, 1905)</a></cite></blockquote> <p>If you would like something more academic, check the <a href="/blog/2021/distill/">distill style post</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="bib"/><summary type="html"><![CDATA[an example of a blog post with bibliography]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="EOC-dev.github.io/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>EOC-dev.github.io/blog/2023/jupyter-notebook</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown} {% assign jupyter_path = "assets/jupyter/blog.ipynb" | relative_url %} {% capture notebook_exists %}{% file_exists
assets/jupyter/blog.ipynb %}{% endcapture %} {% if notebook_exists == "true" %} {% jupyter_notebook jupyter_path %} {% else %}
<span class="nt">&lt;p&gt;</span>Sorry, the notebook you are looking for does not exist.<span class="nt">&lt;/p&gt;</span>
{% endif %} {:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry><entry><title type="html">a post with custom blockquotes</title><link href="EOC-dev.github.io/blog/2023/custom-blockquotes/" rel="alternate" type="text/html" title="a post with custom blockquotes"/><published>2023-05-12T19:53:00+00:00</published><updated>2023-05-12T19:53:00+00:00</updated><id>EOC-dev.github.io/blog/2023/custom-blockquotes</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/custom-blockquotes/"><![CDATA[<p>This post shows how to add custom styles for blockquotes. Based on <a href="https://github.com/sighingnow/jekyll-gitbook">jekyll-gitbook</a> implementation.</p> <p>We decided to support the same custom blockquotes as in <a href="https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html">jekyll-gitbook</a>, which are also found in a lot of other sites’ styles. The styles definitions can be found on the <a href="https://github.com/alshedivat/al-folio/blob/master/_sass/_base.scss">_base.scss</a> file, more specifically:</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Tips, warnings, and dangers */</span>
<span class="nc">.post</span> <span class="nc">.post-content</span> <span class="nt">blockquote</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nc">.block-tip</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-warning</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-danger</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>A regular blockquote can be used as following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; This is a regular blockquote</span>
<span class="gt">&gt; and it can be used as usual</span>
</code></pre></div></div> <blockquote> <p>This is a regular blockquote and it can be used as usual</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> ]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="blockquotes"/><summary type="html"><![CDATA[an example of a blog post with custom blockquotes]]></summary></entry><entry><title type="html">a post with table of contents on a sidebar</title><link href="EOC-dev.github.io/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents on a sidebar"/><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>EOC-dev.github.io/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/sidebar-table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post as a sidebar, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 id="customizing-your-table-of-contents">Customizing Your Table of Contents</h2> <p data-toc-text="Customizing">If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">a post with audios</title><link href="EOC-dev.github.io/blog/2023/audios/" rel="alternate" type="text/html" title="a post with audios"/><published>2023-04-25T10:25:00+00:00</published><updated>2023-04-25T10:25:00+00:00</updated><id>EOC-dev.github.io/blog/2023/audios</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/audios/"><![CDATA[<p>This is an example post with audios. It supports local audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="audios"/><summary type="html"><![CDATA[this is what included audios could look like]]></summary></entry><entry><title type="html">a post with videos</title><link href="EOC-dev.github.io/blog/2023/videos/" rel="alternate" type="text/html" title="a post with videos"/><published>2023-04-24T21:01:00+00:00</published><updated>2023-04-24T21:01:00+00:00</updated><id>EOC-dev.github.io/blog/2023/videos</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/videos/"><![CDATA[<p>This is an example post with videos. It supports local video files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <p>It does also support embedding videos from different sources. Here are some examples:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="videos"/><summary type="html"><![CDATA[this is what included videos could look like]]></summary></entry><entry><title type="html">displaying beautiful tables with Bootstrap Tables</title><link href="EOC-dev.github.io/blog/2023/tables/" rel="alternate" type="text/html" title="displaying beautiful tables with Bootstrap Tables"/><published>2023-03-20T18:37:00+00:00</published><updated>2023-03-20T18:37:00+00:00</updated><id>EOC-dev.github.io/blog/2023/tables</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/tables/"><![CDATA[<p>Using markdown to display tables is easy. Just use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       |    center 1    |       right 1 |
| Left 2       |    center 2    |       right 2 |
| Left 3       |    center 3    |       right 3 |
</code></pre></div></div> <p>That will generate:</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <p>It is also possible to use HTML to display tables. For example, the following HTML code will display a table with <a href="https://bootstrap-table.com/">Bootstrap Table</a>, loaded from a JSON file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">"table"</span> <span class="na">data-toggle=</span><span class="s">"table"</span> <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-field="id">ID</th> <th data-field="name">Item Name</th> <th data-field="price">Item Price</th> </tr> </thead> </table> <p></p> <p>By using <a href="https://bootstrap-table.com/">Bootstrap Table</a> it is possible to create pretty complex tables, with pagination, search, and more. For example, the following HTML code will display a table, loaded from a JSON file, with pagination, search, checkboxes, and header/content alignment. For more information, check the <a href="https://examples.bootstrap-table.com/index.html">documentation</a>.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">data-click-to-select=</span><span class="s">"true"</span>
  <span class="na">data-height=</span><span class="s">"460"</span>
  <span class="na">data-pagination=</span><span class="s">"true"</span>
  <span class="na">data-search=</span><span class="s">"true"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span>
<span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-checkbox=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span> <span class="na">data-halign=</span><span class="s">"left"</span> <span class="na">data-align=</span><span class="s">"center"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span> <span class="na">data-halign=</span><span class="s">"center"</span> <span class="na">data-align=</span><span class="s">"right"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span> <span class="na">data-halign=</span><span class="s">"right"</span> <span class="na">data-align=</span><span class="s">"left"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-click-to-select="true" data-height="460" data-pagination="true" data-search="true" data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-checkbox="true"></th> <th data-field="id" data-halign="left" data-align="center" data-sortable="true">ID</th> <th data-field="name" data-halign="center" data-align="right" data-sortable="true">Item Name</th> <th data-field="price" data-halign="right" data-align="left" data-sortable="true">Item Price</th> </tr> </thead> </table>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="tables"/><summary type="html"><![CDATA[an example of how to use Bootstrap Tables]]></summary></entry><entry><title type="html">a post with table of contents</title><link href="EOC-dev.github.io/blog/2023/table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents"/><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>EOC-dev.github.io/blog/2023/table-of-contents</id><content type="html" xml:base="EOC-dev.github.io/blog/2023/table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents in the beginning of the post.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 id="table-of-contents-options">Table of Contents Options</h2> <p>If you want to learn more about how to customize the table of contents, you can check the <a href="https://github.com/toshimaru/jekyll-toc">jekyll-toc</a> repository.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><summary type="html"><![CDATA[an example of a blog post with table of contents]]></summary></entry></feed>