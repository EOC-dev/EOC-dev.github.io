<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="EOC-dev.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="EOC-dev.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-22T11:15:29+00:00</updated><id>EOC-dev.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">OpenCV image color extractor and</title><link href="EOC-dev.github.io/portfolio/2024/ColorExtractorToList/" rel="alternate" type="text/html" title="OpenCV image color extractor and"/><published>2024-01-21T17:40:15+00:00</published><updated>2024-01-21T17:40:15+00:00</updated><id>EOC-dev.github.io/portfolio/2024/ColorExtractorToList</id><content type="html" xml:base="EOC-dev.github.io/portfolio/2024/ColorExtractorToList/"><![CDATA[<p>One of the projects I did in my undergrad years was to make a framebuffer on an FPGA using VHDL. This was challanging enough on its own, but one of the ancillary challenges I faced was how to load images on to the memory arrays that I had defined. I needed some way to take images, downsample them (so theyd fit on the limited memory FPGA), then extract that color palette and the colors themselves into a format that could be easily loaded on to the FPGA.</p> <p>Initially I turned my attention towards <a href="https://www.mathworks.com/products/image.html">MATLABS Image Processing Toolbox</a>, but I couldn’t get it to work right. Essentially, the matlab script I had created kept thinking there were more colors then there were in the image, which <em>really</em> messed things up.</p> <p>Eventually, I figured out a solution in python using OpenCV. One of the <a href="https://docs.opencv.org/3.4/db/deb/tutorial_display_image.html">first things you do</a> when you make an opencv script is use the imread function. This basically takes the input image (or frames from a video feed), and converts it into a numpy array. If that numpy array contains the rgb values of each of the pixels in the image, couldnt you loop through that array and extract those values into a list? Thats precisely what the following python script does:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="portfolio"/><category term="python,"/><category term="OpenCV"/><summary type="html"><![CDATA[It's color]]></summary></entry><entry><title type="html">Fuzzy-Logic speed controller using an ultrasonic sensor</title><link href="EOC-dev.github.io/portfolio/2024/fuzzyspeed/" rel="alternate" type="text/html" title="Fuzzy-Logic speed controller using an ultrasonic sensor"/><published>2024-01-21T16:40:16+00:00</published><updated>2024-01-21T16:40:16+00:00</updated><id>EOC-dev.github.io/portfolio/2024/fuzzyspeed</id><content type="html" xml:base="EOC-dev.github.io/portfolio/2024/fuzzyspeed/"><![CDATA[<p>For my Fuzzy Logic undergrad class we were required to do a project. This was a fairly open ended design project which included both a MATLAB simulation section as well as a hardware implentation section, and was a collaborative effort between me and my classmate <strong>Cooper Burns</strong> (insert LinkedIn link here). I mainly dealt with the hardware section, which I will describe in this article.</p> <h2 id="the-plan">The Plan</h2> <p>The plan for this project was to design a fuzzy logic controller such that, while approaching an object (a wall, box, or any object detectable by an ultrasonic sensor), a robot’s speed would decrease based on the distance to that object, getting slower and slower as it gets closer until it stops a set distance away.</p> <h2 id="hardware-setup">Hardware Setup</h2> <p>The hardware for this project was based on <a href="https://osoyoo.com/2020/03/01/use-raspberry-pi-to-control-mecanum-omni-wheel-robot-car/">this</a> osoyoo robot kit, but generally to do this project one would need:</p> <table> <thead> <tr> <th>Hardware</th> <th style="text-align: center">We Used</th> </tr> </thead> <tbody> <tr> <td>Single Board Computer</td> <td style="text-align: center">RaspberryPi 4</td> </tr> <tr> <td>Motor Controller</td> <td style="text-align: center">Osoyoo L298n based module</td> </tr> <tr> <td>Geared DC Motors (x2)</td> <td style="text-align: center">osoyoo Motors</td> </tr> <tr> <td>Ultrasonic Sensor</td> <td style="text-align: center">HC-SR04</td> </tr> <tr> <td>Robot Chassis</td> <td style="text-align: center">Osoyoo chassis</td> </tr> </tbody> </table> <p>The robot was setup according to the instructions <a href="https://osoyoo.com/2020/03/01/use-raspberry-pi-to-control-mecanum-omni-wheel-robot-car/">here</a>, but fundamentally the hardware translates to the following control diagram:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Fuzzy-Logic%20speed%20controller/ControlFlowDiagram-480.webp 480w,/assets/img/Fuzzy-Logic%20speed%20controller/ControlFlowDiagram-800.webp 800w,/assets/img/Fuzzy-Logic%20speed%20controller/ControlFlowDiagram-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Fuzzy-Logic%20speed%20controller/ControlFlowDiagram.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="software-setup-and-code-walk-through">Software Setup and code walk through</h2> <p>After the hardware was setup, the software was created to implement the control scheme using python – a setup guide for which is provided on the <a href="https://github.com/EOC-dev/FuzzyLogicSpeedController_V1">github</a> page for this project.</p> <p>Below is the state flow diagram for the main python program:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Fuzzy-Logic%20speed%20controller/FuzzyMechanumStateFlow-480.webp 480w,/assets/img/Fuzzy-Logic%20speed%20controller/FuzzyMechanumStateFlow-800.webp 800w,/assets/img/Fuzzy-Logic%20speed%20controller/FuzzyMechanumStateFlow-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Fuzzy-Logic%20speed%20controller/FuzzyMechanumStateFlow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>First, the GPIO pins are setup using the <a href="https://sourceforge.net/p/raspberry-gpio-python/wiki/Examples/">RPI.GPIO</a> library</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># GPIO pin assignments for motor control
</span>
<span class="c1">#Osoyoo used an l298n based motor driver which requires 3 pins per motor: a PWM(analog) signal pin to control the speed of the motor (the EN pins), and two digital logic pins to control the direction of the motor using an H-bridge circuit.
</span><span class="n">IN1Rear</span><span class="p">,</span> <span class="n">IN2Rear</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">18</span>
<span class="n">IN3Rear</span><span class="p">,</span> <span class="n">IN4Rear</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">15</span> 
<span class="n">ENA</span><span class="p">,</span> <span class="n">ENB</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">33</span>

<span class="c1">#front Wheels were not used do to a hardware problem with the osoyoo motor x driver
</span><span class="n">IN1Front</span><span class="p">,</span> <span class="n">IN2Front</span> <span class="o">=</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">38</span>
<span class="n">IN3Front</span><span class="p">,</span> <span class="n">IN4Front</span> <span class="o">=</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">32</span>

<span class="c1">#Setting up pins for the ultrasonic sensor
</span><span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="n">ECHO_PIN</span> <span class="o">=</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">37</span>

<span class="c1"># Initialization - setting up GPIO pins as input/output. For more info, please read the GPIO docs: https://sourceforge.net/p/raspberry-gpio-python/wiki/BasicUsage/
</span><span class="n">GPIO</span><span class="p">.</span><span class="nf">setmode</span><span class="p">(</span><span class="n">GPIO</span><span class="p">.</span><span class="n">BOARD</span><span class="p">)</span>
<span class="n">GPIO</span><span class="p">.</span><span class="nf">setup</span><span class="p">([</span><span class="n">IN1Rear</span><span class="p">,</span> <span class="n">IN2Rear</span><span class="p">,</span> <span class="n">IN3Rear</span><span class="p">,</span> <span class="n">IN4Rear</span><span class="p">,</span> <span class="n">ENA</span><span class="p">,</span> <span class="n">ENB</span><span class="p">,</span> <span class="n">IN1Front</span><span class="p">,</span> <span class="n">IN2Front</span><span class="p">,</span> <span class="n">IN3Front</span><span class="p">,</span> <span class="n">IN4Front</span><span class="p">,</span> <span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="n">ECHO_PIN</span><span class="p">],</span> <span class="n">GPIO</span><span class="p">.</span><span class="n">OUT</span><span class="p">)</span>
<span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">([</span><span class="n">ENA</span><span class="p">,</span> <span class="n">ENB</span><span class="p">],</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">GPIO</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="n">ECHO_PIN</span><span class="p">,</span> <span class="n">GPIO</span><span class="p">.</span><span class="n">IN</span><span class="p">)</span>

<span class="c1"># Motor control functions (e.g., go_ahead, turn_left, etc.)
# Each function corresponds to a motor action, these defs were mainly taken from the provided osoyoo tutorial series for the robot kit used in this project: https://osoyoo.com/driver/mecanum/mecanum-pi.py
</span>
<span class="c1">#make rear right motor moving forward
</span><span class="k">def</span> <span class="nf">rr_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">):</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN1Rear</span><span class="p">,</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN2Rear</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>

    <span class="c1">#ChangeDutyCycle(speed) function can change the motor rotation speed
</span>    <span class="c1">#rightSpeed.ChangeDutyCycle(speed)
</span>
<span class="c1">#make rear left motor moving forward    
</span><span class="k">def</span> <span class="nf">rl_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">):</span>  
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN3Rear</span><span class="p">,</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN4Rear</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>
    <span class="c1">#leftSpeed.ChangeDutyCycle(speed)
</span>
<span class="k">def</span> <span class="nf">go_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">):</span>
    <span class="nf">rl_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
    <span class="nf">rr_ahead</span><span class="p">(</span><span class="n">speed</span><span class="p">)</span>
<span class="c1">#     fl_ahead(speed)
#     fr_ahead(speed)
</span>    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN1Front</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span> <span class="c1">#Since we are just using motors that use motor pi controller, the rear wheels are disabled
</span>    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN2Front</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span> <span class="c1">#Sadly, only motors controlled using motor pi can have the pwm signal modified
</span>    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN3Front</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">IN4Front</span><span class="p">,</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># Setup for PWM speed control
#following code only works when using Model-Pi instead of Model X motor driver board which can give raspberry Pi USB 5V power
#Initialize Rear model Pi board ENA and ENB pins, tell OS that ENA,ENB will output analog PWM signal with 1000 frequency
</span><span class="n">rightSpeed</span> <span class="o">=</span> <span class="n">GPIO</span><span class="p">.</span><span class="nc">PWM</span><span class="p">(</span><span class="n">ENA</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">leftSpeed</span> <span class="o">=</span> <span class="n">GPIO</span><span class="p">.</span><span class="nc">PWM</span><span class="p">(</span><span class="n">ENB</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">rightSpeed</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">leftSpeed</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <p>Next, the code defines the function for the Ultrasonic Sensor function:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Ultrasonic distance measurement function. I go into more detail on the concepts behind this code on the corresponding blog entry for this project:
</span><span class="k">def</span> <span class="nf">DistMeasure</span><span class="p">():</span>
    <span class="c1"># set Trigger pin to high to send out pulse
</span>    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
 
    <span class="c1"># set Trigger pin to low after 0.01ms
</span>    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.00001</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">output</span><span class="p">(</span><span class="n">TRIGGER_PIN</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
 
    <span class="n">TimeSent</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">TimeRecieved</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
 
    <span class="c1"># save time the pulse was sent
</span>    <span class="k">while</span> <span class="n">GPIO</span><span class="p">.</span><span class="nf">input</span><span class="p">(</span><span class="n">ECHO_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">TimeSent</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
 
    <span class="c1"># save time the reflected pulse was recieved
</span>    <span class="k">while</span> <span class="n">GPIO</span><span class="p">.</span><span class="nf">input</span><span class="p">(</span><span class="n">ECHO_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">TimeRecieved</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
 
    <span class="c1"># difference between timestamp sending the pulse and timestamp recieving the reflected wave back
</span>    <span class="n">ElapsedTIme</span> <span class="o">=</span> <span class="n">TimeRecieved</span> <span class="o">-</span> <span class="n">TimeSent</span>

    <span class="c1"># Solving for distance using the classic speed = dist/time equation. Speed is speed of sound (343 m/s so 34300 cm/s), and we divide by two here to account for our time calculation being the time for the pulse to hit an object and then return -- whereas we just want the time to travel to the object.
</span>    <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">ElapsedTIme</span> <span class="o">*</span> <span class="mi">34300</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
 
    <span class="k">return</span> <span class="n">distance</span>
</code></pre></div></div> <p>Essentially whats happening here is an extrapolation of the classic physics formula:</p> \[\text{speed} = \frac{\text{distance}}{\text{time}}\] <p>Whereas in our case we use the ultrasonic sensor to send out a sound pulse when the TRIGGER pin is set high, then record the time when it recieves it and the ECHO pin is high. The speed of sound is a constant, and thus our equation becomes:</p> \[\text{distance} = \frac{\text{(TimeSignalRecieved - TimeSignalSent)} \times 34300}{2}\] <p>The code then defines the function for the Fuzzy Logic controller function:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Fuzzy inferencing system that takes in the distance calculated from the ultrasonic sensor, and uses it to determine what speed to set motors to.
</span><span class="k">def</span> <span class="nf">get_speed_value</span><span class="p">(</span><span class="n">dist</span><span class="p">):</span>
    <span class="c1"># Define universe variables
</span>    <span class="n">distance</span> <span class="o">=</span> <span class="n">ctrl</span><span class="p">.</span><span class="nc">Antecedent</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="sh">'</span><span class="s">distance</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">speed</span> <span class="o">=</span> <span class="n">ctrl</span><span class="p">.</span><span class="nc">Consequent</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="sh">'</span><span class="s">speed</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># Define fuzzy membership functions
</span>    <span class="n">distance</span><span class="p">[</span><span class="sh">'</span><span class="s">close</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fuzz</span><span class="p">.</span><span class="nf">trimf</span><span class="p">(</span><span class="n">distance</span><span class="p">.</span><span class="n">universe</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">])</span>
    <span class="n">distance</span><span class="p">[</span><span class="sh">'</span><span class="s">medium</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fuzz</span><span class="p">.</span><span class="nf">trimf</span><span class="p">(</span><span class="n">distance</span><span class="p">.</span><span class="n">universe</span><span class="p">,</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">])</span>
    <span class="n">distance</span><span class="p">[</span><span class="sh">'</span><span class="s">far</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fuzz</span><span class="p">.</span><span class="nf">trimf</span><span class="p">(</span><span class="n">distance</span><span class="p">.</span><span class="n">universe</span><span class="p">,</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">])</span>

    <span class="n">speed</span><span class="p">[</span><span class="sh">'</span><span class="s">slow</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fuzz</span><span class="p">.</span><span class="nf">trimf</span><span class="p">(</span><span class="n">speed</span><span class="p">.</span><span class="n">universe</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">])</span>
    <span class="n">speed</span><span class="p">[</span><span class="sh">'</span><span class="s">medium</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fuzz</span><span class="p">.</span><span class="nf">trimf</span><span class="p">(</span><span class="n">speed</span><span class="p">.</span><span class="n">universe</span><span class="p">,</span> <span class="p">[</span><span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">70</span><span class="p">])</span>
    <span class="n">speed</span><span class="p">[</span><span class="sh">'</span><span class="s">fast</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fuzz</span><span class="p">.</span><span class="nf">trimf</span><span class="p">(</span><span class="n">speed</span><span class="p">.</span><span class="n">universe</span><span class="p">,</span> <span class="p">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>

    <span class="c1"># Define fuzzy rules
</span>    <span class="n">rule1</span> <span class="o">=</span> <span class="n">ctrl</span><span class="p">.</span><span class="nc">Rule</span><span class="p">(</span><span class="n">distance</span><span class="p">[</span><span class="sh">'</span><span class="s">close</span><span class="sh">'</span><span class="p">],</span> <span class="n">speed</span><span class="p">[</span><span class="sh">'</span><span class="s">slow</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">rule2</span> <span class="o">=</span> <span class="n">ctrl</span><span class="p">.</span><span class="nc">Rule</span><span class="p">(</span><span class="n">distance</span><span class="p">[</span><span class="sh">'</span><span class="s">medium</span><span class="sh">'</span><span class="p">],</span> <span class="n">speed</span><span class="p">[</span><span class="sh">'</span><span class="s">medium</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">rule3</span> <span class="o">=</span> <span class="n">ctrl</span><span class="p">.</span><span class="nc">Rule</span><span class="p">(</span><span class="n">distance</span><span class="p">[</span><span class="sh">'</span><span class="s">far</span><span class="sh">'</span><span class="p">],</span> <span class="n">speed</span><span class="p">[</span><span class="sh">'</span><span class="s">fast</span><span class="sh">'</span><span class="p">])</span>

    <span class="c1"># Create control system
</span>    <span class="n">speed_ctrl</span> <span class="o">=</span> <span class="n">ctrl</span><span class="p">.</span><span class="nc">ControlSystem</span><span class="p">([</span><span class="n">rule1</span><span class="p">,</span> <span class="n">rule2</span><span class="p">,</span> <span class="n">rule3</span><span class="p">])</span>

    <span class="c1"># Create a control system simulator
</span>    <span class="n">speedL</span> <span class="o">=</span> <span class="n">ctrl</span><span class="p">.</span><span class="nc">ControlSystemSimulation</span><span class="p">(</span><span class="n">speed_ctrl</span><span class="p">)</span>

    <span class="c1"># Set inputs
</span>    <span class="n">speedL</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="sh">'</span><span class="s">distance</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist</span>

    <span class="c1"># Calculate results
</span>    <span class="n">speedL</span><span class="p">.</span><span class="nf">compute</span><span class="p">()</span>

    <span class="n">FuzzySpeed</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">speedL</span><span class="p">.</span><span class="n">output</span><span class="p">[</span><span class="sh">'</span><span class="s">speed</span><span class="sh">'</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">FuzzySpeed</span>
</code></pre></div></div> <p>A detailed explanation of the principles behind how fuzzy inferencing works was beyond the scope of this short portfolio article,<d-footnote> If the reader is unfamiliar with how fuzzy logic inferencing works, here is a great series of videos by the great Brian Douglas on the topic: </d-footnote> but essentially the function starts by establishing two fuzzy inference sets (FIS), one for distance and the other for speed. These sets interpret the sensor’s output levels, translating them into more fuzzy terms like “close” or “far.” Likewise for the concept of speed (expressed via pwm values) – mapping these values to fuzzy concepts like “slow or “fast.”</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Fuzzy-Logic%20speed%20controller/DistFuzzySet-480.webp 480w,/assets/img/Fuzzy-Logic%20speed%20controller/DistFuzzySet-800.webp 800w,/assets/img/Fuzzy-Logic%20speed%20controller/DistFuzzySet-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Fuzzy-Logic%20speed%20controller/DistFuzzySet" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Fuzzy-Logic%20speed%20controller/SpeedFuzzySet-480.webp 480w,/assets/img/Fuzzy-Logic%20speed%20controller/SpeedFuzzySet-800.webp 800w,/assets/img/Fuzzy-Logic%20speed%20controller/SpeedFuzzySet-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Fuzzy-Logic%20speed%20controller/SpeedFuzzySet" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Once the two inference sets are defined, the function uses triangular membership functions to map these qualitative descriptors to the sensor’s numerical data. In this context, ‘distance’ and ‘speed’ are treated as fuzzy variables, each associated with sets like ‘close’, ‘medium’, and ‘far’ for distance, and ‘slow’, ‘medium’, and ‘fast’ for speed. These fuzzy sets are then used to formulate rules that govern the system’s behavior. For instance, one rule states that IF the distance is ‘close’, THEN the speed should be ‘slow’. This rule-based approach enables the system to map the distance we recieve from the ultrasonic sensor to a PWM signal to control the motors.</p> <p>The last part of the code defines the main control loop, which calls the MeasureDist function and pipes the distance recieved into our fuzzy logic controller function to obtain the corresponding PWM which will be used to drive our system. This code runs in a loop until a user interrupts the program with a keyboard interrupt.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Continuous loop for processing and control
</span><span class="k">try</span><span class="p">:</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">UltraDist</span> <span class="o">=</span> <span class="nc">DistMeasure</span><span class="p">()</span>  <span class="c1"># Measure distance
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Object distance = </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">UltraDist</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> cm</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">FuzzSpeedOut</span> <span class="o">=</span> <span class="nf">get_speed_value</span><span class="p">(</span><span class="n">UltraDist</span><span class="p">)</span>  <span class="c1"># Process distance through fuzzy logic
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s"> Fuzzy Speed is: </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">FuzzSpeedOut</span><span class="p">))</span>
        <span class="nf">go_ahead</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>  <span class="c1"># initialize a speed for the motor
</span>        <span class="n">rightSpeed</span><span class="p">.</span><span class="nc">ChangeDutyCycle</span><span class="p">(</span><span class="n">FuzzSpeedOut</span><span class="p">)</span> <span class="c1">#USe the speed obtained 
</span>        <span class="n">leftSpeed</span><span class="p">.</span><span class="nc">ChangeDutyCycle</span><span class="p">(</span><span class="n">FuzzSpeedOut</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>

<span class="c1"># Shutdown - cleanup on interrupt (CTRL+C)
</span><span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">User ended program</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">cleanup</span><span class="p">()</span>
</code></pre></div></div> <p>Finally, here is a video of the code working in action:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/Fuzzy-Logic%20speed%20controller/FuzzyLogic_FinalProject_Test2-(720p30).mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> Pretty cool, huh? </div> <h2 id="what-could-be-improved">What could be improved?</h2> <ol> <li>An astute observer will note a disturbing lack of hardware interrupts in the source code. This was mainly because I was still going through my Embedded Systems class and was not comfortable using hardware interrupts extensively yet. Micropython supports interrupts <a href="https://docs.micropython.org/en/latest/reference/isr_rules.html">natively</a>, and Circuitpython supports them <a href="https://learn.adafruit.com/cooperative-multitasking-in-circuitpython-with-asyncio">indirectly</a> using the asyncio module. Both Micropython and Circuitpython are supported on the raspberry pi (see <a href="https://www.raspberrypi.com/documentation/microcontrollers/micropython.html">here</a> and <a href="https://learn.adafruit.com/circuitpython-on-raspberrypi-linux/overview">here</a>). If I were to return to this project I would absolutely use interrupts.</li> <li>One may also notice from the video the crude breadboard voltage divider, this was made out of necessity as there was a mismatch between the output signal from the Ultrasonic sensor and the maximum input voltage of the Rpi’s GPIO pins. While our solution worked, A more elegant solution would be to use a logic level shifter.</li> <li>Since doing this project I have since learned about the <a href="https://github.com/alvesoaj/eFLL">Embedded Fuzzy Logic Library</a>, which allows emplementing fuzzy logic controllers on microcontrollers. I think it would be neat to design a fuzzy controller using the skfuzzy library, then implement it on hardware using the eFLL.</li> </ol>]]></content><author><name></name></author><category term="portfolio"/><category term="Fuzzy-Logic,"/><category term="RaspberryPi,"/><category term="Python"/><summary type="html"><![CDATA[It's Fuzzy]]></summary></entry><entry><title type="html">Arduino soil monitor dashboard and email watering reminder in Labview</title><link href="EOC-dev.github.io/portfolio/2024/ArduinoSoil/" rel="alternate" type="text/html" title="Arduino soil monitor dashboard and email watering reminder in Labview"/><published>2024-01-20T19:40:15+00:00</published><updated>2024-01-20T19:40:15+00:00</updated><id>EOC-dev.github.io/portfolio/2024/ArduinoSoil</id><content type="html" xml:base="EOC-dev.github.io/portfolio/2024/ArduinoSoil/"><![CDATA[<p>For my Electronic Instrumentation undergrad class we were required to do a project. We were given free reign on what the project could be, as long as it was labview related. I had long wanted to do some kind of sensor project using an Arduino, and I wondered: “Could the arduino be interfaced with and controlled by Labview?” The answer may shock you.</p> <h2 id="the-plan">The Plan</h2> <p>The plan for this project was to use labview to create a dashboard that would show a visual indicator when the plant needed watering, as well as send some kind of notification to the user reminding them to water their plant.</p> <h2 id="hardware-setup">Hardware Setup</h2> <p>The hardware for this project was pretty simple</p> <table> <thead> <tr> <th>Hardware</th> <th style="text-align: center">We Used</th> </tr> </thead> <tbody> <tr> <td>Microcontroller</td> <td style="text-align: center">Arduino UNO R3</td> </tr> <tr> <td>Soil moisture sensor</td> <td style="text-align: center">Capacitative based module</td> </tr> <tr> <td>Plants</td> <td style="text-align: center">Mint (1x)</td> </tr> </tbody> </table> <p>The soil sensor was connected to the arduino, and the arduino to a laptop via a USB cable.</p> <h2 id="software-setup-and-code-walkthrough">Software Setup and code walkthrough</h2> <p>After the hardware was setup, labview was setup to communicate with arduino and take in its sensor readings – a setup guide for which is provided on the <a href="https://github.com/EOC-dev/LabviewArduinoSoilMonitor">github</a> page for this project. This project made use fo the <a href="">Labview LINX addon</a>, which essentially turned the Arduino into a DAQ.</p> <p>Below is the Dashboard of the completed project – split into two parts: The first contains all the main controls of the program, and the second shows the current state machine the program is in as well as sensor output data for troubleshooting purposes:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ArduinoSoil/Dash1-480.webp 480w,/assets/img/ArduinoSoil/Dash1-800.webp 800w,/assets/img/ArduinoSoil/Dash1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ArduinoSoil/Dash1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ArduinoSoil/Dash2-480.webp 480w,/assets/img/ArduinoSoil/Dash2-800.webp 800w,/assets/img/ArduinoSoil/Dash2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ArduinoSoil/Dash2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The code utilizes <a href="https://www.ni.com/en/support/documentation/supplemental/16/simple-state-machine-template-documentation.html">state machines</a> to control the flow of the program depending on the detected soil moisture level as well as user input. The state machine has four cases:</p> <ul> <li>Read Value (Default)</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ArduinoSoil/State1-480.webp 480w,/assets/img/ArduinoSoil/State1-800.webp 800w,/assets/img/ArduinoSoil/State1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ArduinoSoil/State1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This is the state the program will start in, and will use the obtained sensor values to determine whether to loop within this case or progress to the “Send Reminder” case.</p> <ul> <li>Send Reminder</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ArduinoSoil/State2-480.webp 480w,/assets/img/ArduinoSoil/State2-800.webp 800w,/assets/img/ArduinoSoil/State2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ArduinoSoil/State2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This state uses the “Send Email” expressVi to send an email to the designated user telling them their plant needs to be watered. Depending on whether the user pressed the “Send additional reminders” button, it will either enter the “Reminder Timer” case, or the “Button fallback” case.</p> <ul> <li>Reminder Timer</li> <li></li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ArduinoSoil/State3-480.webp 480w,/assets/img/ArduinoSoil/State3-800.webp 800w,/assets/img/ArduinoSoil/State3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ArduinoSoil/State3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This state uses the “Elapsed time” expressVI, and subtracts from it the user defined Duration to determine the remaining time before moving forward. The Duration is entered in hours and Minutes, and needs to first be converted to seconds before being subtracted. The “remaining time” value is then used to determine whether to go to the “Send Reminder” case or stay in the present one. Theres also a failsafe to ensure that, if the moisture level falls below the threshold (i.e if the user waters the plant in this state), it will return to the “Read Value” case.</p> <ul> <li>Button Fallback</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ArduinoSoil/State4-480.webp 480w,/assets/img/ArduinoSoil/State4-800.webp 800w,/assets/img/ArduinoSoil/State4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ArduinoSoil/State4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This existed purely to deal with the scenario where the user does not select “Send additional email reminders.” It will stay in this case until either the moisture level falls below the threshold or the user presses the button while in this case.</p> <p>Besides the 4 main cases of the state machine, the outer shell mainly consists of routing the relevant signals to the labview i/o and making sure the signals were reserved through successive loops.</p> <p>Finally, here is a picture of the code successfully sending an email to a user:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/Fuzzy-Logic%20speed%20controller/FuzzyLogic_FinalProject_Test2-(720p30).mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> Pretty cool, huh? </div> <h2 id="what-could-be-improved">What could be improved?</h2> <ol> <li>Labview sadly has many limitations that make doing an IOT project with it very difficult. This was mainly a proof of concept, but if it seriously wanted to be taken further there would need to be some way to communicate wirelessly with the Arduino/sensor.</li> </ol>]]></content><author><name></name></author><category term="portfolio"/><category term="Arduino,"/><category term="Labview,"/><category term="IOT"/><summary type="html"><![CDATA[It's Labview]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="EOC-dev.github.io/portfolio/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>EOC-dev.github.io/portfolio/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="EOC-dev.github.io/portfolio/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>